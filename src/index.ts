import { Bot, Context, session, SessionFlavor, webhookCallback } from "grammy";
import { D1Adapter } from "@grammyjs/storage-cloudflare";
import { SessionData } from "./types";
import { trelloBot } from "./modules/trelloBot";
import { yougileBot } from "./modules/yougileBot";
import {TelegramApi } from "./api/telegram";
import { errorMiddleware } from "./utils/erorr";
import { messageListiner } from "./listeners/messageListener";
import { voiceListiner } from "./listeners/voiceListener";
import { messageFileListiner } from "./listeners/messageFileListener";
export type MyContext = Context & SessionFlavor<SessionData> & {env:Env,telegramApi:TelegramApi};
export default {
    async fetch(request: Request, env: Env): Promise<Response> {

      const bot = new Bot<MyContext>(env.SECRET_TELEGRAM_API_TOKEN);

      const grammyD1StorageAdapter = await D1Adapter.create<SessionData>(env.DB, 'BotSessions')      

      bot.use(session({
        initial:():SessionData=>{return {countCreateTask:0,isAdmin:false}},
        storage: grammyD1StorageAdapter,
      }))

      bot.use(async (ctx, next) => {
        ctx.env = env;
        ctx.telegramApi=new TelegramApi(env.SECRET_TELEGRAM_API_TOKEN)
        await next();
      });

      await bot.api.setMyCommands([
        { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
        { command: "help", description: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã" },
        { command: "settings", description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π" },
      ]);

      bot.command("start", async (ctx) => {
        const msg=await ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –Ø Jarvis, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å –∂–∏–∑–Ω—å –ª—é–¥—è–º üòä. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`);
        await ctx.pinChatMessage(msg.message_id)
      })

      bot.command("help", async (ctx) => {
        await ctx.reply("–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö, –∫–∞–∫ Yougile –∏ Trello. –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫: /settings\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è Trello:\n/tconnect ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (<key>, <token> –∏ <columnId>)\n/tdelete ‚Äî —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Trello\n/trello ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç Trello –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è Yougile:\n/yconnect  ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è(<key> –∏ <columnId>)\n/ydelete ‚Äî —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Yougile\n/yougile ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç Yougile –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",{link_preview_options:{is_disabled:true}});
      });

      bot.command("settings", async (ctx) => {
        if(ctx.session.trello==null && ctx.session.yougile==null){
          await ctx.reply("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Trello –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å <key>, <token> –∏ <columnId>.\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Yougile –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å <key> –∏ <columnId>.");
        }
        if(ctx.session.trello!=null) await ctx.reply(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è c Trello\nkey: \`${ctx.session.trello.key}\`\ntoken: \`${ctx.session.trello.token}\`\ncolumnId: \`${ctx.session.trello.columnId}\`\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å Trello –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /trello.`,{ parse_mode: 'Markdown' });

        if(ctx.session.yougile!=null) await ctx.reply(`–ü–æ–¥–∫–ª—é—á–µ–Ω–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è c Yougile\nkey: \`${ctx.session.yougile.key}\`\ncolumnId: \`${ctx.session.yougile.columnId}\`\n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å Yougile –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /yougile.`,{ parse_mode: 'Markdown' });
      });

      bot.use(trelloBot);

      bot.use(yougileBot);

      bot.use(messageListiner);

      bot.use(voiceListiner);

      bot.use(messageFileListiner);

      return errorMiddleware(request, env,() =>
        webhookCallback(bot, "cloudflare-mod")(request)
      ); 
    },
  }; 
  